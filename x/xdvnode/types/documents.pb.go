// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: xdvnode/documents.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Documents struct {
	Creator      string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id           uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Name         string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Hash         string `protobuf:"bytes,4,opt,name=hash,proto3" json:"hash,omitempty"`
	LastModified uint64 `protobuf:"varint,5,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
	Signature    string `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
	Did          string `protobuf:"bytes,7,opt,name=did,proto3" json:"did,omitempty"`
	MetadataURI  string `protobuf:"bytes,8,opt,name=metadataURI,proto3" json:"metadataURI,omitempty"`
}

func (m *Documents) Reset()         { *m = Documents{} }
func (m *Documents) String() string { return proto.CompactTextString(m) }
func (*Documents) ProtoMessage()    {}
func (*Documents) Descriptor() ([]byte, []int) {
	return fileDescriptor_9acd19b8810ea64d, []int{0}
}
func (m *Documents) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Documents) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Documents.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Documents) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Documents.Merge(m, src)
}
func (m *Documents) XXX_Size() int {
	return m.Size()
}
func (m *Documents) XXX_DiscardUnknown() {
	xxx_messageInfo_Documents.DiscardUnknown(m)
}

var xxx_messageInfo_Documents proto.InternalMessageInfo

func (m *Documents) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Documents) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Documents) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Documents) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *Documents) GetLastModified() uint64 {
	if m != nil {
		return m.LastModified
	}
	return 0
}

func (m *Documents) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *Documents) GetDid() string {
	if m != nil {
		return m.Did
	}
	return ""
}

func (m *Documents) GetMetadataURI() string {
	if m != nil {
		return m.MetadataURI
	}
	return ""
}

func init() {
	proto.RegisterType((*Documents)(nil), "ElectronicSignaturesIndustries.xdvnode.xdvnode.Documents")
}

func init() { proto.RegisterFile("xdvnode/documents.proto", fileDescriptor_9acd19b8810ea64d) }

var fileDescriptor_9acd19b8810ea64d = []byte{
	// 290 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xbd, 0x4e, 0xc3, 0x30,
	0x14, 0x85, 0xeb, 0x36, 0xb4, 0xc4, 0xfc, 0x08, 0x79, 0xc1, 0x03, 0xb2, 0x22, 0x58, 0xba, 0x24,
	0x19, 0x78, 0x03, 0x54, 0x86, 0x0e, 0x2c, 0x41, 0x2c, 0x0c, 0x20, 0x37, 0xd7, 0x34, 0x96, 0x1a,
	0xbb, 0xb2, 0x9d, 0x2a, 0xbc, 0x05, 0x8f, 0xc5, 0xd8, 0x81, 0x81, 0x11, 0x25, 0x2f, 0x82, 0x62,
	0x1a, 0x85, 0xc9, 0xc7, 0x9f, 0x7d, 0x8f, 0xae, 0x3e, 0x7c, 0x59, 0xc3, 0x4e, 0x69, 0x10, 0x29,
	0xe8, 0xbc, 0x2a, 0x85, 0x72, 0x36, 0xd9, 0x1a, 0xed, 0x34, 0x49, 0xee, 0x37, 0x22, 0x77, 0x46,
	0x2b, 0x99, 0x3f, 0xca, 0xb5, 0xe2, 0xae, 0x32, 0xc2, 0x2e, 0x15, 0x54, 0xd6, 0x19, 0x29, 0x6c,
	0x72, 0x98, 0xeb, 0xcf, 0xeb, 0x2f, 0x84, 0xc3, 0x45, 0xdf, 0x41, 0x28, 0x9e, 0xe5, 0x46, 0x70,
	0xa7, 0x0d, 0x45, 0x11, 0x9a, 0x87, 0x59, 0x7f, 0x25, 0xe7, 0x78, 0x2c, 0x81, 0x8e, 0x23, 0x34,
	0x0f, 0xb2, 0xb1, 0x04, 0x42, 0x70, 0xa0, 0x78, 0x29, 0xe8, 0xc4, 0x7f, 0xf3, 0xb9, 0x63, 0x05,
	0xb7, 0x05, 0x0d, 0xfe, 0x58, 0x97, 0xc9, 0x0d, 0x3e, 0xdb, 0x70, 0xeb, 0x5e, 0x4b, 0x0d, 0xf2,
	0x4d, 0x0a, 0xa0, 0x47, 0xbe, 0xe2, 0xb4, 0x83, 0x0f, 0x07, 0x46, 0xae, 0x70, 0x68, 0xfb, 0x65,
	0xe9, 0xd4, 0x4f, 0x0f, 0x80, 0x5c, 0xe0, 0x09, 0x48, 0xa0, 0x33, 0xcf, 0xbb, 0x48, 0x22, 0x7c,
	0x52, 0x0a, 0xc7, 0x81, 0x3b, 0xfe, 0x94, 0x2d, 0xe9, 0xb1, 0x7f, 0xf9, 0x8f, 0xee, 0x5e, 0x3e,
	0x1b, 0x86, 0xf6, 0x0d, 0x43, 0x3f, 0x0d, 0x43, 0x1f, 0x2d, 0x1b, 0xed, 0x5b, 0x36, 0xfa, 0x6e,
	0xd9, 0xe8, 0x79, 0xb1, 0x96, 0xae, 0xa8, 0x56, 0x49, 0xae, 0xcb, 0x74, 0x70, 0x15, 0x0f, 0xb2,
	0xe2, 0xc1, 0x56, 0x5a, 0xc3, 0x2e, 0xf6, 0x9a, 0xeb, 0xb4, 0x17, 0xee, 0xde, 0xb7, 0xc2, 0xae,
	0xa6, 0xde, 0xf6, 0xed, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb2, 0xed, 0x32, 0x7b, 0x88, 0x01,
	0x00, 0x00,
}

func (m *Documents) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Documents) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Documents) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MetadataURI) > 0 {
		i -= len(m.MetadataURI)
		copy(dAtA[i:], m.MetadataURI)
		i = encodeVarintDocuments(dAtA, i, uint64(len(m.MetadataURI)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Did) > 0 {
		i -= len(m.Did)
		copy(dAtA[i:], m.Did)
		i = encodeVarintDocuments(dAtA, i, uint64(len(m.Did)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintDocuments(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x32
	}
	if m.LastModified != 0 {
		i = encodeVarintDocuments(dAtA, i, uint64(m.LastModified))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintDocuments(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintDocuments(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintDocuments(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintDocuments(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDocuments(dAtA []byte, offset int, v uint64) int {
	offset -= sovDocuments(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Documents) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovDocuments(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovDocuments(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDocuments(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovDocuments(uint64(l))
	}
	if m.LastModified != 0 {
		n += 1 + sovDocuments(uint64(m.LastModified))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovDocuments(uint64(l))
	}
	l = len(m.Did)
	if l > 0 {
		n += 1 + l + sovDocuments(uint64(l))
	}
	l = len(m.MetadataURI)
	if l > 0 {
		n += 1 + l + sovDocuments(uint64(l))
	}
	return n
}

func sovDocuments(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDocuments(x uint64) (n int) {
	return sovDocuments(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Documents) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocuments
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Documents: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Documents: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocuments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocuments
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocuments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocuments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocuments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocuments
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocuments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocuments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocuments
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocuments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastModified", wireType)
			}
			m.LastModified = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocuments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastModified |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocuments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocuments
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocuments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Did", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocuments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocuments
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocuments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Did = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataURI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocuments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocuments
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocuments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetadataURI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDocuments(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDocuments
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDocuments(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDocuments
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDocuments
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDocuments
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDocuments
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDocuments
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDocuments
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDocuments        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDocuments          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDocuments = fmt.Errorf("proto: unexpected end of group")
)
