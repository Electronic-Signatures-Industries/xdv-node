"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveAuthenticator = exports.verifyJWT = exports.verifyJWS = exports.createJWT = exports.createJWS = exports.decodeJWT = exports.NBF_SKEW = exports.SUPPORTED_PUBLIC_KEY_TYPES = void 0;
const tslib_1 = require("tslib");
const VerifierAlgorithm_1 = tslib_1.__importDefault(require("./VerifierAlgorithm"));
const SignerAlgorithm_1 = tslib_1.__importDefault(require("./SignerAlgorithm"));
const util_1 = require("./util");
exports.SUPPORTED_PUBLIC_KEY_TYPES = {
    RS256: ['RsaSignature2018', 'RsaVerificationKey2018']
};
// TODO: Implement https://w3c-ccg.github.io/ld-cryptosuite-registry/#rsa
const defaultAlg = 'RS256';
const DID_JSON = 'application/did+json';
function encodeSection(data) {
    return util_1.encodeBase64url(JSON.stringify(data));
}
exports.NBF_SKEW = 300;
function decodeJWS(jws) {
    const parts = jws.match(/^([a-zA-Z0-9_-]+)\.([a-zA-Z0-9_-]+)\.([a-zA-Z0-9_-]+)$/);
    if (parts) {
        return {
            header: JSON.parse(util_1.decodeBase64url(parts[1])),
            payload: parts[2],
            signature: parts[3],
            data: `${parts[1]}.${parts[2]}`
        };
    }
    throw new Error('Incorrect format JWS');
}
/**  @module did-jwt/JWT */
/**
 *  Decodes a JWT and returns an object representing the payload
 *
 *  @example
 *  decodeJWT('eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NksifQ.eyJpYXQiOjE1...')
 *
 *  @param    {String}            jwt                a JSON Web Token to verify
 *  @return   {Object}                               a JS object representing the decoded JWT
 */
function decodeJWT(jwt) {
    if (!jwt)
        throw new Error('no JWT passed into decodeJWT');
    try {
        const jws = decodeJWS(jwt);
        const decodedJwt = Object.assign(jws, { payload: JSON.parse(util_1.decodeBase64url(jws.payload)) });
        return decodedJwt;
    }
    catch (e) {
        throw new Error('Incorrect format JWT');
    }
}
exports.decodeJWT = decodeJWT;
/**
 *  Creates a signed JWS given a payload, a signer, and an optional header.
 *
 *  @example
 *  const signer = ES256KSigner(process.env.PRIVATE_KEY)
 *  const jws = await createJWS({ my: 'payload' }, signer)
 *
 *  @param    {Object}            payload           payload object
 *  @param    {Signer}            signer            a signer, see `ES256KSigner or `EdDSASigner`
 *  @param    {Object}            header            optional object to specify or customize the JWS header
 *  @return   {Promise<Object, Error>}              a promise which resolves with a JWS string or rejects with an error
 */
function createJWS(payload, signer, header = {}) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        if (!header.alg)
            header.alg = defaultAlg;
        const encodedPayload = typeof payload === 'string' ? payload : encodeSection(payload);
        const signingInput = [encodeSection(header), encodedPayload].join('.');
        const jwtSigner = SignerAlgorithm_1.default(header.alg);
        const signature = yield jwtSigner(signingInput, signer);
        return [signingInput, signature].join('.');
    });
}
exports.createJWS = createJWS;
/**
 *  Creates a signed JWT given an address which becomes the issuer, a signer, and a payload for which the signature is over.
 *
 *  @example
 *  const signer = ES256KSigner(process.env.PRIVATE_KEY)
 *  createJWT({address: '5A8bRWU3F7j3REx3vkJ...', signer}, {key1: 'value', key2: ..., ... }).then(jwt => {
 *      ...
 *  })
 *
 *  @param    {Object}            payload            payload object
 *  @param    {Object}            [options]          an unsigned credential object
 *  @param    {String}            options.issuer     The DID of the issuer (signer) of JWT
 *  @param    {String}            options.alg        [DEPRECATED] The JWT signing algorithm to use. Supports: [ES256K, ES256K-R, Ed25519, EdDSA], Defaults to: ES256K.
 *                                                   Please use `header.alg` to specify the algorithm
 *  @param    {Signer}            options.signer     a `Signer` function, Please see `ES256KSigner` or `EdDSASigner`
 *  @param    {Object}            header             optional object to specify or customize the JWT header
 *  @return   {Promise<Object, Error>}               a promise which resolves with a signed JSON Web Token or rejects with an error
 */
function createJWT(payload, { issuer, signer, alg, expiresIn }, header = {}) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        if (!signer)
            throw new Error('No Signer functionality has been configured');
        if (!issuer)
            throw new Error('No issuing DID has been configured');
        if (!header.typ)
            header.typ = 'JWT';
        if (!header.alg)
            header.alg = alg;
        const timestamps = {
            iat: Math.floor(Date.now() / 1000),
            exp: undefined
        };
        if (expiresIn) {
            if (typeof expiresIn === 'number') {
                timestamps.exp = (payload.nbf || timestamps.iat) + Math.floor(expiresIn);
            }
            else {
                throw new Error('JWT expiresIn is not a number');
            }
        }
        const fullPayload = Object.assign(Object.assign(Object.assign({}, timestamps), payload), { iss: issuer });
        return createJWS(fullPayload, signer, header);
    });
}
exports.createJWT = createJWT;
function verifyJWSDecoded({ header, data, signature }, pubkeys) {
    if (!Array.isArray(pubkeys))
        pubkeys = [pubkeys];
    const signer = VerifierAlgorithm_1.default(header.alg)(data, signature, pubkeys);
    return signer;
}
/**
 *  Verifies given JWS. If the JWS is valid, returns the public key that was
 *  used to sign the JWS, or throws an `Error` if none of the `pubkeys` match.
 *
 *  @example
 *  const pubkey = verifyJWT('eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NksifQ.eyJyZXF1Z....', { publicKeyHex: '0x12341...' })
 *
 *  @param    {String}                          jws         A JWS string to verify
 *  @param    {Array<VerificationMethod> | VerificationMethod}    pubkeys     The public keys used to verify the JWS
 *  @return   {VerificationMethod}                       The public key used to sign the JWS
 */
function verifyJWS(jws, pubkeys) {
    const jwsDecoded = decodeJWS(jws);
    return verifyJWSDecoded(jwsDecoded, pubkeys);
}
exports.verifyJWS = verifyJWS;
/**
 *  Verifies given JWT. If the JWT is valid, the promise returns an object including the JWT, the payload of the JWT,
 *  and the did doc of the issuer of the JWT.
 *
 *  @example
 *  verifyJWT('did:uport:eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NksifQ.eyJyZXF1Z....', {audience: '5A8bRWU3F7j3REx3vkJ...', callbackUrl: 'https://...'}).then(obj => {
 *      const did = obj.did // DID of signer
 *      const payload = obj.payload
 *      const doc = obj.doc // DID Document of signer
 *      const jwt = obj.jwt
 *      const signerKeyId = obj.signerKeyId // ID of key in DID document that signed JWT
 *      ...
 *  })
 *
 *  @param    {String}            jwt                a JSON Web Token to verify
 *  @param    {Object}            [options]           an unsigned credential object
 *  @param    {Boolean}           options.auth        Require signer to be listed in the authentication section of the DID document (for Authentication purposes)
 *  @param    {String}            options.audience    DID of the recipient of the JWT
 *  @param    {String}            options.callbackUrl callback url in JWT
 *  @return   {Promise<Object, Error>}               a promise which resolves with a response object or rejects with an error
 */
function verifyJWT(jwt, options = {
    resolver: null,
    auth: null,
    audience: null,
    callbackUrl: null,
    skewTime: null,
    proofPurpose: null
}) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        if (!options.resolver)
            throw new Error('No DID resolver has been configured');
        const { payload, header, signature, data } = decodeJWT(jwt);
        const proofPurpose = options.hasOwnProperty('auth')
            ? options.auth
                ? 'authentication'
                : undefined
            : options.proofPurpose;
        const { didResolutionResult, authenticators, issuer } = yield resolveAuthenticator(options.resolver, header.alg, payload.iss, proofPurpose);
        const signer = yield verifyJWSDecoded({ header, data, signature }, authenticators);
        const now = Math.floor(Date.now() / 1000);
        const skewTime = options.skewTime >= 0 ? options.skewTime : exports.NBF_SKEW;
        if (signer) {
            const nowSkewed = now + skewTime;
            if (payload.nbf) {
                if (payload.nbf > nowSkewed) {
                    throw new Error(`JWT not valid before nbf: ${payload.nbf}`);
                }
            }
            else if (payload.iat && payload.iat > nowSkewed) {
                throw new Error(`JWT not valid yet (issued in the future) iat: ${payload.iat}`);
            }
            if (payload.exp && payload.exp <= now - skewTime) {
                throw new Error(`JWT has expired: exp: ${payload.exp} < now: ${now}`);
            }
            if (payload.aud) {
                if (!options.audience && !options.callbackUrl) {
                    throw new Error('JWT audience is required but your app address has not been configured');
                }
                const audArray = Array.isArray(payload.aud) ? payload.aud : [payload.aud];
                const matchedAudience = audArray.find((item) => options.audience === item || options.callbackUrl === item);
                if (typeof matchedAudience === 'undefined') {
                    throw new Error(`JWT audience does not match your DID or callback url`);
                }
            }
            return { payload, didResolutionResult, issuer, signer, jwt };
        }
    });
}
exports.verifyJWT = verifyJWT;
/**
 * Resolves relevant public keys or other authenticating material used to verify signature from the DID document of provided DID
 *
 *  @example
 *  resolveAuthenticator(resolver, 'ES256K', 'did:uport:2nQtiQG6Cgm1GYTBaaKAgr76uY7iSexUkqX').then(obj => {
 *      const payload = obj.payload
 *      const profile = obj.profile
 *      const jwt = obj.jwt
 *      ...
 *  })
 *
 *  @param    {String}            alg                a JWT algorithm
 *  @param    {String}            did                a Decentralized IDentifier (DID) to lookup
 *  @param    {Boolean}           auth               Restrict public keys to ones specifically listed in the 'authentication' section of DID document
 *  @return   {Promise<DIDAuthenticator>}               a promise which resolves with a response object containing an array of authenticators or if non exist rejects with an error
 */
function resolveAuthenticator(resolver, alg, issuer, proofPurpose) {
    var _a, _b, _c;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const types = exports.SUPPORTED_PUBLIC_KEY_TYPES[alg];
        if (!types || types.length === 0) {
            throw new Error(`No supported signature types for algorithm ${alg}`);
        }
        let didResult;
        const result = (yield resolver.resolve(issuer, { accept: DID_JSON }));
        // support legacy resolvers that do not produce DIDResolutionResult
        if (Object.getOwnPropertyNames(result).indexOf('didDocument') === -1) {
            didResult = {
                didDocument: result,
                didDocumentMetadata: {},
                didResolutionMetadata: { contentType: DID_JSON }
            };
        }
        else {
            didResult = result;
        }
        if ((_a = didResult.didResolutionMetadata) === null || _a === void 0 ? void 0 : _a.error) {
            const { error, message } = didResult.didResolutionMetadata;
            throw new Error(`Unable to resolve DID document for ${issuer}: ${error}, ${message || ''}`);
        }
        const getPublicKeyById = (verificationMethods, pubid) => {
            const filtered = verificationMethods.filter(({ id }) => pubid === id);
            return filtered.length > 0 ? filtered[0] : null;
        };
        let publicKeysToCheck = [
            ...(((_b = didResult === null || didResult === void 0 ? void 0 : didResult.didDocument) === null || _b === void 0 ? void 0 : _b.verificationMethod) || []),
            ...(((_c = didResult === null || didResult === void 0 ? void 0 : didResult.didDocument) === null || _c === void 0 ? void 0 : _c.publicKey) || [])
        ];
        if (typeof proofPurpose === 'string') {
            // support legacy DID Documents that do not list assertionMethod
            if (proofPurpose.startsWith('assertion') && !didResult.didDocument.hasOwnProperty('assertionMethod')) {
                didResult.didDocument.assertionMethod = [...publicKeysToCheck.map((pk) => pk.id)];
            }
            publicKeysToCheck = (didResult.didDocument[proofPurpose] || [])
                .map((verificationMethod) => {
                if (typeof verificationMethod === 'string') {
                    return getPublicKeyById(publicKeysToCheck, verificationMethod);
                }
                else if (typeof verificationMethod.publicKey === 'string') {
                    // this is a legacy format
                    return getPublicKeyById(publicKeysToCheck, verificationMethod.publicKey);
                }
                else {
                    return verificationMethod;
                }
            })
                .filter((key) => key != null);
        }
        const authenticators = publicKeysToCheck.filter(({ type }) => types.find((supported) => supported === type));
        if (typeof proofPurpose === 'string' && (!authenticators || authenticators.length === 0)) {
            throw new Error(`DID document for ${issuer} does not have public keys suitable for ${alg} with ${proofPurpose} purpose`);
        }
        if (!authenticators || authenticators.length === 0) {
            throw new Error(`DID document for ${issuer} does not have public keys for ${alg}`);
        }
        return { authenticators, issuer, didResolutionResult: didResult };
    });
}
exports.resolveAuthenticator = resolveAuthenticator;
//# sourceMappingURL=JWT.js.map