import e from"ethjs-provider-http";import r from"ethjs-query";import t from"ethjs-contract";import i from"ethr-did-resolver/contracts/ethr-did-registry.json";import{SimpleSigner as s,toEthereumAddress as n,createJWT as o,verifyJWT as a}from"did-jwt";import{Buffer as d}from"buffer";import{stringToBytes32 as h,delegateTypes as c,REGISTRY as g}from"ethr-did-resolver";const u=new(0,require("elliptic").ec)("secp256k1"),{Secp256k1VerificationKey2018:p}=c;function w(e,r){if(d.isBuffer(r))return"0x"+r.toString("hex");const t=e.match(/^did\/(pub|auth|svc)\/(\w+)(\/(\w+))?(\/(\w+))?$/);return t&&"base64"===t[6]?"0x"+d.from(r,"base64").toString("hex"):r.match(/^0x[0-9a-fA-F]*$/)?r:"0x"+d.from(r).toString("hex")}class f{constructor(e){const n=this.configureProvider(e),o=new r(n),a=e.registry||g,d=new t(o)(i);if(this.registry=d.at(a),this.address=e.address,!this.address)throw new Error("No address is set for EthrDid");this.did="did:ethr:"+this.address,e.signer?this.signer=e.signer:e.privateKey&&(this.signer=s(e.privateKey))}configureProvider(r){return r.provider?r.provider:r.web3?r.web3.currentProvider:new e(r.rpcUrl||"https://mainnet.infura.io/ethr-did")}static createKeyPair(){const e=u.genKeyPair(),r=e.getPublic("hex"),t=e.getPrivate("hex");return{address:n(r),privateKey:t}}async lookupOwner(e=!0){return e&&this.owner?this.owner:(await this.registry.identityOwner(this.address))[0]}async changeOwner(e){const r=await this.lookupOwner(),t=await this.registry.changeOwner(this.address,e,{from:r});return this.owner=e,t}async addDelegate(e,{delegateType:r=p,expiresIn:t=86400}){const i=await this.lookupOwner();return this.registry.addDelegate(this.address,r,e,t,{from:i})}async revokeDelegate(e,r=p){const t=await this.lookupOwner();return this.registry.revokeDelegate(this.address,r,e,{from:t})}async setAttribute(e,r,t=86400,i){const s=await this.lookupOwner();return this.registry.setAttribute(this.address,h(e),w(e,r),t,{from:s,gas:i})}async revokeAttribute(e,r,t){const i=await this.lookupOwner();return this.registry.revokeAttribute(this.address,h(e),w(e,r),{from:i,gas:t})}async createSigningDelegate(e=p,r=86400){const t=f.createKeyPair();return this.signer=s(t.privateKey),{kp:t,txHash:await this.addDelegate(t.address,{delegateType:e,expiresIn:r})}}async signJWT(e,r){if("function"!=typeof this.signer)throw new Error("No signer configured");const t={signer:this.signer,alg:"ES256K-R",issuer:this.did};return r&&(t.expiresIn=r),o(e,t)}async verifyJWT(e,r,t=this.did){return a(e,{resolver:r,audience:t})}}export default f;
//# sourceMappingURL=index.modern.js.map
