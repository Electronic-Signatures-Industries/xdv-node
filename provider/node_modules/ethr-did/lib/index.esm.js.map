{"version":3,"file":"index.esm.js","sources":["../src/index.ts"],"sourcesContent":["import HttpProvider from 'ethjs-provider-http'\nimport Eth from 'ethjs-query'\nimport EthContract from 'ethjs-contract'\nimport DidRegistryContract from 'ethr-did-resolver/contracts/ethr-did-registry.json'\nimport { createJWT, verifyJWT, SimpleSigner, toEthereumAddress, Signer } from 'did-jwt'\nimport { Buffer } from 'buffer'\nimport { REGISTRY, stringToBytes32, delegateTypes } from 'ethr-did-resolver'\nconst EC = require('elliptic').ec\nconst secp256k1 = new EC('secp256k1')\nconst { Secp256k1VerificationKey2018 } = delegateTypes\n\n\nfunction attributeToHex (key, value) {\n  if (Buffer.isBuffer(value)) {\n    return `0x${value.toString('hex')}`\n  }\n  const match = key.match(/^did\\/(pub|auth|svc)\\/(\\w+)(\\/(\\w+))?(\\/(\\w+))?$/)\n  if (match) {\n    const encoding = match[6]\n    // TODO add support for base58\n    if (encoding === 'base64') {\n      return `0x${Buffer.from(value, 'base64').toString('hex')}`\n    }\n  }\n  if (value.match(/^0x[0-9a-fA-F]*$/)) {\n    return value\n  }\n  return `0x${Buffer.from(value).toString('hex')}`\n}\n\ninterface IConfig {\n  address: string\n  registry?: string\n  signer?: Signer\n  privateKey?: string\n  rpcUrl?: string\n  provider?: any\n  web3?: any\n}\n\nexport default class EthrDID {\n  public did: string\n  private registry: any\n  private address: string\n  private signer: Signer\n  private owner?: string\n\n  constructor (conf: IConfig) {\n    const provider = this.configureProvider(conf)\n    const eth = new Eth(provider)\n    const registryAddress = conf.registry || REGISTRY\n    const DidReg = new EthContract(eth)(DidRegistryContract)\n    this.registry = DidReg.at(registryAddress)\n    this.address = conf.address\n    if (!this.address) throw new Error('No address is set for EthrDid')\n    this.did = `did:ethr:${this.address}`\n    if (conf.signer) {\n      this.signer = conf.signer\n    } else if (conf.privateKey) {\n      this.signer = SimpleSigner(conf.privateKey)\n    }\n  }\n\n  private configureProvider (conf: IConfig) {\n    if (conf.provider) {\n      return conf.provider\n    } else if (conf.web3) {\n      return conf.web3.currentProvider\n    } else {\n      return new HttpProvider(conf.rpcUrl || 'https://mainnet.infura.io/ethr-did')\n    }\n  }\n\n  \n  static createKeyPair () {\n    const kp = secp256k1.genKeyPair()\n    const publicKey = kp.getPublic('hex')\n    const privateKey = kp.getPrivate('hex')\n    const address = toEthereumAddress(publicKey)\n    return { address, privateKey }\n  }\n\n  async lookupOwner (cache = true) {\n    if (cache && this.owner) return this.owner\n    const result = await this.registry.identityOwner(this.address)\n    return result['0']\n  }\n\n  async changeOwner (newOwner) {\n    const owner = await this.lookupOwner()\n    const txHash = await this.registry.changeOwner(this.address, newOwner, {\n      from: owner\n    })\n    this.owner = newOwner\n    return txHash\n  }\n\n  async addDelegate (delegate, {delegateType = Secp256k1VerificationKey2018, expiresIn = 86400}) {\n    const owner = await this.lookupOwner()\n    return this.registry.addDelegate(\n      this.address,\n      delegateType,\n      delegate,\n      expiresIn,\n      { from: owner }\n    )\n  }\n\n  async revokeDelegate (delegate, delegateType = Secp256k1VerificationKey2018) {\n    const owner = await this.lookupOwner()\n    return this.registry.revokeDelegate(this.address, delegateType, delegate, {\n      from: owner\n    })\n  }\n\n  async setAttribute (key, value, expiresIn = 86400, gasLimit) {\n    const owner = await this.lookupOwner()\n    return this.registry.setAttribute(\n      this.address,\n      stringToBytes32(key),\n      attributeToHex(key, value),\n      expiresIn,\n      {\n        from: owner,\n        gas: gasLimit\n      }\n    )\n  }\n\n  async revokeAttribute (key, value, gasLimit) {\n    const owner = await this.lookupOwner()\n    return this.registry.revokeAttribute(\n      this.address,\n      stringToBytes32(key),\n      attributeToHex(key, value),\n      {\n        from: owner,\n        gas: gasLimit\n      }\n    )\n  }\n\n  // Create a temporary signing delegate able to sign JWT on behalf of identity\n  async createSigningDelegate (\n    delegateType = Secp256k1VerificationKey2018,\n    expiresIn = 86400\n  ) {\n    const kp = EthrDID.createKeyPair()\n    this.signer = SimpleSigner(kp.privateKey)\n    const txHash = await this.addDelegate(kp.address, {\n      delegateType,\n      expiresIn\n    })\n    return { kp, txHash }\n  }\n\n  async signJWT (payload, expiresIn?: number) {\n    if (typeof this.signer !== 'function') {\n      throw new Error('No signer configured')\n    }\n    const options = { signer: this.signer, alg: 'ES256K-R', issuer: this.did }\n    if (expiresIn) options['expiresIn'] = expiresIn\n    return createJWT(payload, options)\n  }\n\n  async verifyJWT (jwt, resolver, audience = this.did): Promise<any> {\n    return verifyJWT(jwt, { resolver, audience })\n  }\n}"],"names":["secp256k1","EC","require","ec","Secp256k1VerificationKey2018","delegateTypes","attributeToHex","key","value","Buffer","isBuffer","toString","match","from","EthrDID","conf","provider","this","configureProvider","eth","Eth","registryAddress","registry","REGISTRY","DidReg","EthContract","DidRegistryContract","at","address","Error","did","signer","privateKey","SimpleSigner","web3","currentProvider","HttpProvider","rpcUrl","createKeyPair","kp","genKeyPair","publicKey","getPublic","getPrivate","toEthereumAddress","lookupOwner","cache","owner","identityOwner","result","changeOwner","newOwner","_this4","txHash","addDelegate","delegate","delegateType","expiresIn","_this6","revokeDelegate","_this8","setAttribute","gasLimit","_this10","stringToBytes32","gas","revokeAttribute","_this12","createSigningDelegate","signJWT","payload","options","alg","issuer","createJWT","verifyJWT","jwt","resolver","audience"],"mappings":"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"}