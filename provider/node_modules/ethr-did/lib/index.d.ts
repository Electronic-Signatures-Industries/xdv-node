import { Signer } from 'did-jwt';
interface IConfig {
    address: string;
    registry?: string;
    signer?: Signer;
    privateKey?: string;
    rpcUrl?: string;
    provider?: any;
    web3?: any;
}
export default class EthrDID {
    did: string;
    private registry;
    private address;
    private signer;
    private owner?;
    constructor(conf: IConfig);
    private configureProvider;
    static createKeyPair(): {
        address: string;
        privateKey: any;
    };
    lookupOwner(cache?: boolean): Promise<any>;
    changeOwner(newOwner: any): Promise<any>;
    addDelegate(delegate: any, { delegateType, expiresIn }: {
        delegateType?: any;
        expiresIn?: number;
    }): Promise<any>;
    revokeDelegate(delegate: any, delegateType?: any): Promise<any>;
    setAttribute(key: any, value: any, expiresIn: number, gasLimit: any): Promise<any>;
    revokeAttribute(key: any, value: any, gasLimit: any): Promise<any>;
    createSigningDelegate(delegateType?: any, expiresIn?: number): Promise<{
        kp: {
            address: string;
            privateKey: any;
        };
        txHash: any;
    }>;
    signJWT(payload: any, expiresIn?: number): Promise<string>;
    verifyJWT(jwt: any, resolver: any, audience?: string): Promise<any>;
}
export {};
